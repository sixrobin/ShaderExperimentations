#pragma kernel Init
#pragma kernel Iterate
#pragma kernel ApplyBuffer

RWTexture2D<float4> Result;
sampler2D GridBuffer;
float Resolution;
float DecayStep;

float random(float2 range)
{
    return frac(sin(dot(range.xy, float2(12.9898, 78.233))) * 43758.5453);
}

[numthreads(8,8,1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    float value = random(id.xy);
    
    if (value < 0.5) value = 0;
    else if (value < 0.75) value = 1;
    else value = 2;

    Result[id.xy] = value;
}

[numthreads(8,8,1)]
void Iterate(uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(id.x / Resolution, id.y / Resolution, 0, 0);
    float state = tex2Dlod(GridBuffer, pos).r;
    float delta = 1.0 / Resolution;
    
    float onNeighbours = 0;
    float offNeighbours = 0;
    float dyingNeighbours = 0;

    float neighbour1 = tex2Dlod(GridBuffer, pos + float4(-delta, -delta, 0, 0)).x;
    float neighbour2 = tex2Dlod(GridBuffer, pos + float4(-delta, 0, 0, 0)).x;
    float neighbour3 = tex2Dlod(GridBuffer, pos + float4(-delta, delta, 0, 0)).x;
    float neighbour4 = tex2Dlod(GridBuffer, pos + float4(0, delta, 0, 0)).x;
    float neighbour5 = tex2Dlod(GridBuffer, pos + float4(delta, delta, 0, 0)).x;
    float neighbour6 = tex2Dlod(GridBuffer, pos + float4(delta, 0, 0, 0)).x;
    float neighbour7 = tex2Dlod(GridBuffer, pos + float4(delta, -delta, 0, 0)).x;
    float neighbour8 = tex2Dlod(GridBuffer, pos + float4(0, -delta, 0, 0)).x;

    if (neighbour1 < 0.5) offNeighbours++;
    else if (neighbour1 > 1.5) onNeighbours++;
    else dyingNeighbours++;

    if (neighbour2 < 0.5) offNeighbours++;
    else if (neighbour2 > 1.5) onNeighbours++;
    else dyingNeighbours++;
    
    if (neighbour3 < 0.5) offNeighbours++;
    else if (neighbour3 > 1.5) onNeighbours++;
    else dyingNeighbours++;
    
    if (neighbour4 < 0.5) offNeighbours++;
    else if (neighbour4 > 1.5) onNeighbours++;
    else dyingNeighbours++;
    
    if (neighbour5 < 0.5) offNeighbours++;
    else if (neighbour5 > 1.5) onNeighbours++;
    else dyingNeighbours++;

    if (neighbour6 < 0.5) offNeighbours++;
    else if (neighbour6 > 1.5) onNeighbours++;
    else dyingNeighbours++;

    if (neighbour7 < 0.5) offNeighbours++;
    else if (neighbour7 > 1.5) onNeighbours++;
    else dyingNeighbours++;

    if (neighbour8 < 0.5) offNeighbours++;
    else if (neighbour8 > 1.5) onNeighbours++;
    else dyingNeighbours++;

    if (state < 0.5 && onNeighbours == 2)
    {
        state = 2;
    }
    else if (state > 1.5)
    {
        state = 1;
    }
    else
    {
        state = 0;
    }
    
    Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void ApplyBuffer(uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(id.x / Resolution, id.y / Resolution, 0, 0);
    float4 buffer = tex2Dlod(GridBuffer, pos);
    Result[id.xy] = buffer;
}